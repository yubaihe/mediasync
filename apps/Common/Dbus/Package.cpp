#include "Package.h"

 unsigned char CRCH[]=
 {
 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
 0x40
 };

 unsigned char CRCL[] =
 {
 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
 0x40
 };

void CRC16( unsigned char* pszData, short iDataLen, unsigned char* pszOut)
{
    unsigned char iCRCHi = 0xFF;
    unsigned char iCRCLo = 0xFF;
    unsigned char iIndex = 0;

    while(iDataLen--)
    {
        iIndex = iCRCHi ^ * pszData++;
        iCRCHi = iCRCLo ^ CRCH[iIndex];
        iCRCLo = CRCL[iIndex];
    }
    pszOut[1] = iCRCHi;
    pszOut[0] = iCRCLo;
}

CPackage::CPackage()
{
    m_pszBuffer = NULL;
}

CPackage::~CPackage()
{
    if(NULL != m_pszBuffer)
    {
        free(m_pszBuffer);
        m_pszBuffer = NULL;
    }
}
long int CPackage::GetRandomNum()
{
	srandom(time(NULL));
	return random();
}
uint8_t* CPackage::GetPackage(uint16_t iCommandID, uint8_t* pszData, uint16_t iDataLen, uint16_t* piDataLen)
{
    if(NULL != m_pszBuffer)
    {
        free(m_pszBuffer);
        m_pszBuffer = NULL;
    }
    *piDataLen = sizeof(BasePackage) + 1 + iDataLen;
    m_pszBuffer = (uint8_t*)malloc(*piDataLen);
    ASSERT(NULL != m_pszBuffer);
    memset(m_pszBuffer, 0, *piDataLen);
    BasePackage* pBasePackage = (BasePackage*)m_pszBuffer;
    pBasePackage->szHead[0] = 0xFF;
    pBasePackage->szHead[1] = 0x6A;
    pBasePackage->szHead[2] = 0xA6;
    pBasePackage->szRandNum[0] = (uint8_t)GetRandomNum();
    pBasePackage->szRandNum[1] = (uint8_t)GetRandomNum();

    pBasePackage->iCmdID = htons(iCommandID);
    pBasePackage->iDataLen = htons(iDataLen + 4);//加上操作码(iCmdID)和校验(CRC),高位在前
    if(iDataLen != 0)
    {
        memcpy(m_pszBuffer + sizeof(BasePackage) - 1, pszData, iDataLen);
    }
    uint8_t* psz = m_pszBuffer + sizeof(BasePackage) - 1 + iDataLen;
    CRC16(m_pszBuffer + 3, *piDataLen - 3 - 2, psz);
    return m_pszBuffer;
}

uint8_t* CPackage::ParsePackage(uint8_t* pszSrcPackage, int iSrcPackageLen, int* piOutPackageLen, int* piCommandID)
{
	if(NULL != m_pszBuffer)
    {
        free(m_pszBuffer);
        m_pszBuffer = NULL;
    }
	if ((pszSrcPackage[0] != 0xFF) && (pszSrcPackage[1] != 0x6A) && (pszSrcPackage[2] != 0xA6))
	{
		return NULL;
	}
	BasePackage* pBasePackage = (BasePackage*)pszSrcPackage;
	*piCommandID = ntohs(pBasePackage->iCmdID);
	*piOutPackageLen = ntohs(pBasePackage->iDataLen) - 4;
	
	uint8_t* psz = pszSrcPackage + sizeof(BasePackage) - 1 + *piOutPackageLen;
	uint8_t pszCrc[2] = {0};
    CRC16(pszSrcPackage + 3, iSrcPackageLen -3 -2, pszCrc);
	if(psz[0] != pszCrc[0] || psz[1] != pszCrc[1])
	{
		return NULL;
	}
	if(*piOutPackageLen != 0)
	{
		m_pszBuffer = (uint8_t*)malloc(*piOutPackageLen);
        ASSERT(NULL != m_pszBuffer);
		memset(m_pszBuffer, 0, *piOutPackageLen);
		memcpy(m_pszBuffer, pBasePackage->szBuffer, *piOutPackageLen);
	}
    else
    {
        m_pszBuffer = (uint8_t*)malloc(1);
        ASSERT(NULL != m_pszBuffer);
        memset(m_pszBuffer, 0, 1);
    }
	return m_pszBuffer;
}